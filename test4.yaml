AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  DynamoDBTableName:
    Type: String
    Description: "Name of the table to process"
    Default: "rtm"
    
  Timestamp:
    Type: String
    Description: "Timestamp in format YYYY-MM-DDTHH:MM:SS"
    Default: "2025-03-19T01:00:00"
    
  StepFunctionArn:
    Type: String
    Description: "ARN of the existing Step Function to invoke"
    Default: "arn:aws:states:us-east-1:891612570317:stateMachine:DynamoDBBackupRestoration"

  CustomResourceLambdaFunctionName:
    Type: String
    Description: "Lambda Function Name"
    Default: "test-custom-test4 "


  LambdaExecutionRoleName:
    Type: String
    Description: "Lambda Role Name"
    Default: "test-custom-role4"

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref LambdaExecutionRoleName 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Policies:
        - PolicyName: StepFunctionInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref StepFunctionArn
  
  CustomResourceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      FunctionName: !Ref CustomResourceLambdaFunctionName
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 900
      Code:
        ZipFile: |
          import json
          import urllib3
          import boto3

          http = urllib3.PoolManager()

          # Function to send response back to CloudFormation
          def send_response(event, context, response_status, response_data):
              response_body = {
                  "Status": response_status,
                  "Reason": f"See the details in CloudWatch Log Stream: {context.log_stream_name}",
                  "PhysicalResourceId": context.log_stream_name,
                  "StackId": event["StackId"],
                  "RequestId": event["RequestId"],
                  "LogicalResourceId": event["LogicalResourceId"],
                  "Data": response_data
              }
              json_response_body = json.dumps(response_body)
              headers = {"Content-Type": ""}
              response = http.request("PUT", event["ResponseURL"], body=json_response_body, headers=headers)
              print(f"Response status: {response.status}")

          def lambda_handler(event, context):
              print("Received event:", json.dumps(event))

              try:
                  # Get the current table name from resource properties
                  props = event.get('ResourceProperties', {})
                  table_name = props.get('TableName', '')  # Directly using the provided TableName
                  timestamp = props.get('Timestamp', '')
                  step_function_arn = props.get('StepFunctionArn', '')

                  # Initialize response data
                  response_data = {}

                  # Check for Create, Update, or Delete request
                  if event["RequestType"] == "Create" or event["RequestType"] == "Update":
                      # Only trigger Step Function if TableName is provided
                      if table_name:
                          # Create Step Functions client
                          sfn_client = boto3.client('stepfunctions')

                          # Start execution of the Step Function
                          response = sfn_client.start_execution(
                              stateMachineArn=step_function_arn,
                              input=json.dumps({
                                  'DynamoDBTableName': table_name,
                                  'timestamp': timestamp
                              })
                          )
                          print(f"Step Function execution started successfully: {response['executionArn']}")
                          response_data["ExecutionArn"] = response['executionArn']  # Add ExecutionArn to the response

                          # Send success response to CloudFormation
                          send_response(event, context, "SUCCESS", response_data)
                      else:
                          print("No TableName provided, skipping Step Function execution.")
                          response_data["Message"] = "No TableName provided, skipping execution."
                          send_response(event, context, "SUCCESS", response_data)

                  elif event["RequestType"] == "Delete":
                      print("Delete request received, no Step Function execution triggered.")
                      response_data["Message"] = "Delete request received, skipping execution."
                      send_response(event, context, "SUCCESS", response_data)

              except Exception as e:
                  print(f"Error occurred: {str(e)}")
                  send_response(event, context, "FAILED", {"Message": str(e)})

                  return {
                      'statusCode': 500,
                      'body': json.dumps({
                          'Error': str(e)
                      })
                  }

  CustomResource:
    Type: 'Custom::CustomLamdaBackupExecution'
    DependsOn: CustomResourceLambdaFunction
    Properties:
      ServiceToken: !Join
      - ''
      - - 'arn:aws:lambda:'
        - !Ref 'AWS::Region'
        - ':'
        - !Ref 'AWS::AccountId'
        - ':function:'
        - !Ref CustomResourceLambdaFunctionName
      # ServiceToken: arn:aws:lambda:us-east-1:891612570317:function:test-custom-test4
      TableName: !Ref DynamoDBTableName
      Timestamp: !Ref Timestamp
      StepFunctionArn: !Ref StepFunctionArn







