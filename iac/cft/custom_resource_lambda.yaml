AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  DynamoDBTableName:
    Type: String
    Description: Name of the table to process
  Timestamp:
    Type: String
    Description: Timestamp in format YYYY-MM-DDTHH:MM:SS
  StepFunctionArn:
    Type: String
    Description: ARN of the existing Step Function to invoke

  CustomResourceLambdaFunctionName:
    Description: "The name of the Lambda function for the custom resource. For example: ops-custom-resource-lambda"
    Type: String
    Default: "ops-custom-resource-lambda"

  LambdaExecutionRoleName:
    Type: String
    Description: "The name of the IAM role that the Lambda function will assume to access DynamoDB and S3 resources. For example: ops-lambda-dynamodb-role"
    Default: "ops-custom-lambda-execution-role"


Resources:
  CustomResourceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: custom_resource.handler
      FunctionName: !Ref CustomResourceLambdaFunctionName
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 900
      Code:
        ZipFile: |
          import json
          import cfnresponse
          import boto3

          def handler(event, context):
              props = event['ResourceProperties']
              table_name = props['TableName']
              timestamp = props['Timestamp']
              step_function_arn = props['StepFunctionArn']
              try:
                  sfn_client = boto3.client('stepfunctions')
                  response = sfn_client.start_execution(
                      stateMachineArn=step_function_arn,
                      input=json.dumps({
                          'table_name': table_name,
                          'timestamp': timestamp
                      })
                  )
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                      'ExecutionArn': response['executionArn']
                  })
              except Exception as e:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {
                      'Error': str(e)
                  })

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref LambdaExecutionRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Policies:
        - PolicyName: StepFunctionInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref StepFunctionArn

  CustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CustomResourceLambdaFunction.Arn
      TableName: !Ref DynamoDBTableName
      Timestamp: !Ref Timestamp
      StepFunctionArn: !Ref StepFunctionArn
