AWSTemplateFormatVersion: '2010-09-09'
Description: >
  - This CloudFormation template provisions Lambda functions, IAM roles, and necessary policies 
    to manage operations on DynamoDB tables, such as backups, restores, data exports to S3, 
    and data imports from S3. 

Parameters:
  DynamoDBTableName:
    Type: String
    Description: The DynamoDB table name to be used by Lambda functions.
    Default: "xpto"

  DynamoDBBucketName:
    Type: String
    Description: "The name of the S3 bucket to use for exporting DynamoDB data. For example: dynamodbexportdata"
    Default: "dynamodbexportglue"

  LambdaExecutionRoleName:
    Type: String
    Description: "The name of the IAM role that the Lambda function will assume to access DynamoDB and S3 resources. For example: ops-lambda-dynamodb-role"
    Default: "ops-lambda-execution-role"

  FindLatestBackupFunctionName:
    Type: String
    Description: "The name of the Lambda function responsible for finding the latest backup in DynamoDB. For example: ops-find-latest-backup"
    Default: "ops-find-latest-backup"

  RestoreBackupFunctionName:
    Type: String
    Description: "The name of the Lambda function responsible for restoring a DynamoDB table from a backup. For example: ops-restore-backup"
    Default: "ops-restore-backup"

  CheckRestoreStatusFunctionName:
    Type: String
    Description: "The name of the Lambda function responsible for checking the restore status of a DynamoDB table. For example: ops-check-restore-status" 
    Default: "ops-check-restore-status"

  ExportToS3FunctionName:
    Type: String
    Description: "The name of the Lambda function responsible for exporting DynamoDB table data to S3. For example: ops-export-to-s3"
    Default: "ops-export-to-s3"

  DeleteDynamoDBDataFunctionName:
    Type: String
    Description: "The name of the Lambda function responsible for deleting all items from a DynamoDB table. For example: ops-delete-dynamodb-data"
    Default: "ops-delete-dynamodb-data"

  ImportS3ToDynamoDBFunctionName:
    Type: String
    Description: "The name of the Lambda function responsible for importing data from S3 into a DynamoDB table. For example: ops-imports3-to-dynamodb"
    Default: "ops-imports3-to-dynamodb"

  DeleteDynamoDBTableFunctionName:
    Type: String
    Description: "The name of the Lambda function responsible for permanently deleting the DynamoDB table (after all items are deleted). For example: ops-delete-dynamodb-table"
    Default: "ops-delete-dynamodb-table"

Resources:
  # IAM Role for Lmabda Function Execution
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref LambdaExecutionRoleName  
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        - PolicyName: "LambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:ListBackups
                  - dynamodb:DescribeTable
                  - dynamodb:RestoreTableFromBackup
                  - dynamodb:Scan
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteTable
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:Query
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${AWS::AccountId}:${AWS::Region}:${DynamoDBBucketName}/*"
                  - !Sub "arn:aws:s3:::${AWS::AccountId}:${AWS::Region}:${DynamoDBBucketName}"
                  # - arn:aws:s3:::dynamodbexportglue/* 
                  # - arn:aws:s3:::dynamodbexportglue

              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"

  # Lambda function to find the latest backup
  FindLatestBackupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      FunctionName: !Ref FindLatestBackupFunctionName
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os

          dynamodb = boto3.client('dynamodb')

          def lambda_handler(event, context):
              try:
                  table_name = event['TABLE_NAME']  

                  # Get list of backups for the given table
                  response = dynamodb.list_backups(TableName=table_name)

                  if 'BackupSummaries' not in response or not response['BackupSummaries']:
                      return {
                          "statusCode": 404,
                          "body": f"No backups found for table {table_name}"
                      }

                  # Find the latest backup
                  latest_backup = max(response['BackupSummaries'], key=lambda x: x['BackupCreationDateTime'])

                  return {
                      "statusCode": 200,
                      "latest_backup_arn": latest_backup['BackupArn'],
                      "backup_creation_time": str(latest_backup['BackupCreationDateTime'])
                  }

              except Exception as e:
                  return {
                      "statusCode": 500,
                      "body": f"Error fetching backup: {str(e)}"
                  }

      Runtime: "python3.12"
      Timeout: 900

  # Lambda function to restore a backup
  RestoreBackupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      FunctionName: !Ref RestoreBackupFunctionName
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          
          import boto3
          import os

          dynamodb = boto3.client('dynamodb')

          def lambda_handler(event, context):
              try:
                  backup_arn = event['latest_backup_arn']
                  original_table_name = event['TABLE_NAME']
                  new_table_name = f"{original_table_name}_temp"

                  response = dynamodb.restore_table_from_backup(
                      TargetTableName=new_table_name,
                      BackupArn=backup_arn
                  )

                  return {
                      "statusCode": 200,
                      "body": f"Backup restored successfully to {new_table_name}",
                      "restore_table_arn": response['TableDescription']['TableArn'],
                      "restore_table_name": new_table_name
                  }

              except Exception as e:
                  return {
                      "statusCode": 500,
                      "body": f"Error restoring backup: {str(e)}"
                  }

      Runtime: "python3.12"
      Timeout: 900

  # Lambda function to check the table status
  CheckRestoreStatusFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      FunctionName: !Ref CheckRestoreStatusFunctionName
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3

          dynamodb = boto3.client('dynamodb')

          def lambda_handler(event, context):
              table_name = event.get("restored_table_name")

              if not table_name:
                  return {
                      "status": "ERROR",
                      "message": "Missing required input: restored_table_name."
                  }

              try:
                  response = dynamodb.describe_table(TableName=table_name)
                  table_status = response['Table']['TableStatus']

                  if table_status == "ACTIVE":
                      return {
                          "status": "ACTIVE",
                          "restored_table_name": table_name
                      }
                  else:
                      return {
                          "status": "CREATING",
                          "restored_table_name": table_name
                      }

              except Exception as e:
                  return {
                      "status": "ERROR",
                      "message": str(e),
                      "restored_table_name": table_name
                  }
          
      Runtime: "python3.12"
      Timeout: 900
      
  # Lambda function to export data to S3
  ExportToS3Function:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      FunctionName: !Ref ExportToS3FunctionName
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          from datetime import datetime

          dynamodb = boto3.resource('dynamodb')
          s3 = boto3.client('s3')

          def lambda_handler(event, context):
              try:
                  table_name = event['TABLE_NAME']
                  bucket_name = event['BACKUP_BUCKET']

                  table = dynamodb.Table(table_name)
                  items = table.scan()['Items']  

                  timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
                  file_name = f"{table_name}-{timestamp}.json"
                  
                  # Upload the file to S3
                  s3.put_object(Bucket=bucket_name, Key=file_name, Body=json.dumps(items))
                  
                  return {
                      "statusCode": 200,
                      "message": "Backup completed successfully",
                      "S3File": file_name,
                      "S3Path": f"s3://{bucket_name}/{file_name}",
                      "export_status": "SUCCEEDED"
                  }
                  

              except Exception as e:
                  return {
                      "statusCode": 500,
                      "body": f"Backup failed: {str(e)}",
                      "export_status": "FAILED"
                  }

      Runtime: "python3.12"
      Timeout: 900

  # Lambda function to delete dynamodb data 
  DeleteDynamoDBDataFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      FunctionName: !Ref DeleteDynamoDBDataFunctionName
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os

          # Initialize AWS DynamoDB resource
          dynamodb = boto3.resource('dynamodb')
          dynamodb_client = boto3.client('dynamodb')

          def delete_all_items(table_name):
              """Deletes all items from the specified DynamoDB table."""
              try:
                  # Indicate the deletion is in progress
                  print(f"Starting deletion for {table_name}...")
                  table = dynamodb.Table(table_name)

                  # Get primary keys dynamically
                  response = dynamodb_client.describe_table(TableName=table_name)
                  key_schema = response['Table']['KeySchema']
                  keys = [key['AttributeName'] for key in key_schema]

                  # Scan and delete items in batches
                  scan = table.scan(ProjectionExpression=", ".join(keys))
                  with table.batch_writer() as batch:
                      for item in scan['Items']:
                          key_dict = {key: item[key] for key in keys}
                          batch.delete_item(Key=key_dict)

                  print(f"Deleted all items from {table_name}")
                  return "SUCCEEDED"  
              except Exception as e:
                  print(f"Error deleting items from {table_name}: {str(e)}")
                  return "FAILED"  

          def lambda_handler(event, context):
              """Lambda execution starts here."""
              # Fetch table name dynamically from event input
              table_name = event['TABLE_NAME']

              if not table_name:
                  return {
                      "statusCode": 400,
                      "message": "TABLE_NAME is required in event input",
                      "delete_status": "FAILED"
                  }

              try:

                  deletion_status = delete_all_items(table_name)

                  # After deletion operation, check the status and return appropriate response
                  if deletion_status == "IN_PROGRESS":
                      return {
                          "statusCode": 202,  
                          "message": f"Deletion of items from {table_name} is in progress.",
                          "delete_status": "IN_PROGRESS"  
                      }
                  elif deletion_status == "SUCCEEDED":
                      return {
                          "statusCode": 200,
                          "message": f"All items deleted from {table_name}",
                          "delete_status": "SUCCEEDED"  
                      }
                  else:
                      return {
                          "statusCode": 500,
                          "message": f"Failed to delete items from {table_name}",
                          "delete_status": "FAILED"  
                      }
              except Exception as e:
                  # If deletion fails, return failure status
                  return {
                      "statusCode": 500,
                      "message": f"Error deleting items from DynamoDB: {str(e)}",
                      "delete_status": "FAILED"
                  }

      Runtime: "python3.12"
      Timeout: 900
      

  # Lambda function to import data from S3 to DynamoDB
  ImportS3ToDynamoDBFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      FunctionName: !Ref ImportS3ToDynamoDBFunctionName
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os
          import json

          dynamodb = boto3.resource('dynamodb')
          s3 = boto3.client('s3')

          def lambda_handler(event, context):
              try:
                  table_name = event['TABLE_NAME']
                  bucket_name = event['BACKUP_BUCKET']
                  file_name = event['file_name']

                  table = dynamodb.Table(table_name)
                  
                  # Fetch data from S3
                  obj = s3.get_object(Bucket=bucket_name, Key=file_name)
                  items = json.loads(obj['Body'].read())

                  # Restore data to DynamoDB
                  with table.batch_writer() as batch:
                      for item in items:
                          batch.put_item(Item=item)

                  return {
                        "statusCode": 200,
                        "message": f"Successfully restored {len(items)} items to {table_name}",
                        "import_status": "SUCCEEDED"
                    }
                      
              except Exception as e:
                  return {
                      "statusCode": 500,
                      "message": f"Unexpected error: {str(e)}",
                      "import_status": "FAILED"
                  }

      Runtime: "python3.12"
      Timeout: 900

  # Lambda function to delete DynamoDB table items
  DeleteDynamoDBTableFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      FunctionName: !Ref DeleteDynamoDBTableFunctionName
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os

          # Initialize DynamoDB client
          dynamodb = boto3.client('dynamodb')

          def lambda_handler(event, context):
              try:
                  # Fetch the table name directly from the event input
                  table_name = event.get('TABLE_NAME')

                  if not table_name:
                      return {
                          "statusCode": 400,
                          "body": "TABLE_NAME is required in the input",
                          "delete_status": "FAILED"
                      }

                  # Delete the DynamoDB table
                  response = dynamodb.delete_table(TableName=table_name)

                  # If the table deletion was successful
                  if response['TableDescription']['TableName'] == table_name:
                      return {
                          "statusCode": 200,
                          "body": f"Table {table_name} deleted successfully!",
                          "delete_status": "SUCCEEDED"
                      }
                  else:
                      return {
                          "statusCode": 500,
                          "body": f"Failed to delete table {table_name}.",
                          "delete_status": "FAILED"
                      }

              except Exception as e:
                  # Handle any exceptions and return failure status
                  return {
                      "statusCode": 500,
                      "body": f"Error deleting table: {str(e)}",
                      "delete_status": "FAILED"
                  }

      Runtime: "python3.12"
      Timeout: 900
      
Outputs:
  FindLatestBackupFunctionName:
    Description: "Find Latest Backup Lambda Function Name"
    Value: !Ref FindLatestBackupFunction

  RestoreBackupFunctionName:
    Description: "Restore Backup Lambda Function Name"
    Value: !Ref RestoreBackupFunction

  ExportToS3FunctionName:
    Description: "Export to S3 Lambda Function Name"
    Value: !Ref ExportToS3Function

  DeleteDynamoDBTableFunctionName:
    Description: "Delete DynamoDB Table Lambda Function Name"
    Value: !Ref DeleteDynamoDBTableFunction

  ImportS3ToDynamoDBFunctionName:
    Description: "Import S3 to DynamoDB Lambda Function Name"
    Value: !Ref ImportS3ToDynamoDBFunction

  LambdaExecutionRoleArn:
    Description: "The ARN of the Lambda execution role"
    Value: !GetAtt LambdaExecutionRole.Arn