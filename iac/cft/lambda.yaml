AWSTemplateFormatVersion: '2010-09-09'
Description: >
  - This CloudFormation template provisions Lambda functions, IAM roles, and necessary policies 
    to find DynamoDB backups and export them to S3.

Parameters:
  DynamoDBBucketName:
    Type: String
    Description: "The name of the S3 bucket to use for exporting DynamoDB data. For example: dynamodbexportdata"
    Default: "dynamodbexportglue25"

  LambdaExecutionRoleName:
    Type: String
    Description: "The name of the IAM role that the Lambda function will assume to access DynamoDB and S3 resources. For example: ops-lambda-dynamodb-role"
    Default: "ops-lambda-execution-role"

  FindLatestBackupFunctionName:
    Type: String
    Description: "The name of the Lambda function responsible for finding the latest backup in DynamoDB. For example: ops-find-latest-backup"
    Default: "ops-find-latest-backup"

  ExportToS3FunctionName:
    Type: String
    Description: "The name of the Lambda function responsible for exporting DynamoDB table data to S3. For example: ops-export-to-s3"
    Default: "ops-export-to-s3"

Resources:
  # IAM Role for Lambda Function Execution
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref LambdaExecutionRoleName  
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        - PolicyName: "LambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:ListBackups
                  - dynamodb:DescribeTable
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${AWS::AccountId}:${AWS::Region}:${DynamoDBBucketName}/*"
                  - !Sub "arn:aws:s3:::${AWS::AccountId}:${AWS::Region}:${DynamoDBBucketName}"

              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
  # Lambda function to find the latest backup
  FindLatestBackupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      FunctionName: !Ref FindLatestBackupFunctionName
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os

          dynamodb = boto3.client('dynamodb')

          def lambda_handler(event, context):
              try:
                  table_name = event['TABLE_NAME']  

                  # Get list of backups for the given table
                  response = dynamodb.list_backups(TableName=table_name)

                  if 'BackupSummaries' not in response or not response['BackupSummaries']:
                      return {
                          "statusCode": 404,
                          "body": f"No backups found for table {table_name}"
                      }

                  # Find the latest backup
                  latest_backup = max(response['BackupSummaries'], key=lambda x: x['BackupCreationDateTime'])

                  return {
                      "statusCode": 200,
                      "latest_backup_arn": latest_backup['BackupArn'],
                      "backup_creation_time": str(latest_backup['BackupCreationDateTime'])
                  }

              except Exception as e:
                  return {
                      "statusCode": 500,
                      "body": f"Error fetching backup: {str(e)}"
                  }

      Runtime: "python3.12"
      Timeout: 900

  # Lambda function to export data to S3
  ExportToS3Function:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      FunctionName: !Ref ExportToS3FunctionName
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          from datetime import datetime

          dynamodb = boto3.resource('dynamodb')
          s3 = boto3.client('s3')

          def lambda_handler(event, context):
              try:
                  table_name = event['TABLE_NAME']
                  bucket_name = event['S3_BUCKET']

                  table = dynamodb.Table(table_name)
                  items = table.scan()['Items']  

                  timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
                  file_name = f"{table_name}-{timestamp}.json"
                  
                  # Upload the file to S3
                  s3.put_object(Bucket=bucket_name, Key=file_name, Body=json.dumps(items))
                  
                  return {
                      "statusCode": 200,
                      "message": "Backup completed successfully",
                      "S3File": file_name,
                      "S3Path": f"s3://{bucket_name}/{file_name}",
                      "export_status": "SUCCEEDED"
                  }
                  
              except Exception as e:
                  return {
                      "statusCode": 500,
                      "body": f"Backup failed: {str(e)}",
                      "export_status": "FAILED"
                  }

      Runtime: "python3.12"
      Timeout: 900

Outputs:
  FindLatestBackupFunctionName:
    Description: "Find Latest Backup Lambda Function Name"
    Value: !Ref FindLatestBackupFunction

  ExportToS3FunctionName:
    Description: "Export to S3 Lambda Function Name"
    Value: !Ref ExportToS3Function

  LambdaExecutionRoleArn:
    Description: "The ARN of the Lambda execution role"
    Value: !GetAtt LambdaExecutionRole.Arn
