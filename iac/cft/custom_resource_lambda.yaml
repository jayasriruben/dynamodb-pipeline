AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  DynamoDBTableName:
    Type: String
    Description: "Name of the table to process"
    
  Timestamp:
    Type: String
    Description: "Timestamp in format YYYY-MM-DDTHH:MM:SS"
    
  StepFunctionArn:
    Type: String
    Description: "ARN of the existing Step Function to invoke"
    
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: test-custom-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Policies:
        - PolicyName: StepFunctionInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref StepFunctionArn
  
  CustomResourceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      FunctionName: test-custom-test2
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 900
      Code:
        ZipFile: |
        
          import json
          import boto3
          import urllib3

          http = urllib3.PoolManager()

          # Function to send response back to CloudFormation
          def send_response(event, context, response_status, response_data):
              response_body = {
                  "Status": response_status,
                  "Reason": f"See the details in CloudWatch Log Stream: {context.log_stream_name}",
                  "PhysicalResourceId": context.log_stream_name,
                  "StackId": event["StackId"],
                  "RequestId": event["RequestId"],
                  "LogicalResourceId": event["LogicalResourceId"],
                  "Data": response_data
              }

              json_response_body = json.dumps(response_body)
              headers = {"Content-Type": ""}
              
              # Send the response to CloudFormation
              response = http.request("PUT", event["ResponseURL"], body=json_response_body, headers=headers)
              print(f"Response status: {response.status}")

          def lambda_handler(event, context):
              print("Received event:", json.dumps(event, indent=2))

              # Access resource properties from the event
              props = event.get('ResourceProperties', {})
              table_name = props.get('TableName')
              timestamp = props.get('Timestamp')
              step_function_arn = props.get('StepFunctionArn')

              # Debug print to verify the extracted properties
              print(f"TableName: {table_name}")
              print(f"Timestamp: {timestamp}")
              print(f"StepFunctionArn: {step_function_arn}")

              # Check if any required properties are missing
              if not table_name or not timestamp or not step_function_arn:
                  return {
                      'statusCode': 400,
                      'body': json.dumps({
                          'Error': 'Missing required parameters: TableName, Timestamp, or StepFunctionArn'
                      })
                  }

              try:
                  # Create Step Functions client
                  sfn_client = boto3.client('stepfunctions')
                  print(f"Starting Step Function execution for ARN: {step_function_arn}")

                  # Start execution of the Step Function (ensure correct keys for the input)
                  response = sfn_client.start_execution(
                      stateMachineArn=step_function_arn,
                      input=json.dumps({
                          'DynamoDBTableName': table_name,  
                          'timestamp': timestamp
                      })
                  )
                  print(f"Step Function execution started successfully: {response['executionArn']}")

                  # Send success response back to CloudFormation
                  response_data = {
                      'ExecutionArn': response['executionArn']
                  }
                  send_response(event, context, "SUCCESS", response_data)

                  # Return success
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'ExecutionArn': response['executionArn']
                      })
                  }

              except Exception as e:
                  print(f"Error occurred: {str(e)}")

                  # Send failure response back to CloudFormation
                  send_response(event, context, "FAILED", {"Message": str(e)})

                  return {
                      'statusCode': 500,
                      'body': json.dumps({
                          'Error': str(e)
                      })
                  }



  CustomResource:
    Type: 'Custom::CustomLamdaBackupExecution'
    DependsOn: CustomResourceLambdaFunction
    Properties:
      ServiceToken: arn:aws:lambda:us-east-1:891612570317:function:test-custom-test2
      TableName: !Ref DynamoDBTableName
      Timestamp: !Ref Timestamp
      StepFunctionArn: !Ref StepFunctionArn







